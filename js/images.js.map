{
"version":3,
"file":"internal/js/images.js",
"lineCount":3,
"mappings":"A,YA2B4B,QAAA,EAAQ,CAAC,CAAD,CAAQ,CAC1C,IAAI,EAAQ,CACZ,OAAO,SAAQ,EAAG,CAChB,MAAI,EAAJ,CAAY,CAAA,OAAZ,CACS,CACL,KAAM,CAAA,CADD,CAEL,MAAO,CAAA,CAAM,CAAA,EAAN,CAFF,CADT,CAMS,CAAC,KAAM,CAAA,CAAP,CAPO,CAFwB,CCEhB,QAAA,EAAQ,CAAC,CAAD,CAAW,CAC7C,GAAI,EAAA,CAAA,WAAoB,MAApB,CAAJ,CAAA,CCEA,IAAI,EAAoC,WAApC,EAAmB,MAAO,OAA1B,EAAmD,MAAA,SAAnD,EDCK,CCAa,CAAW,MAAA,SAAX,CACtB,EAAA,CAAO,CAAA,CAAmB,CAAA,KAAA,CDDjB,CCCiB,CAAnB,CFc6B,CAAC,KAAMA,CAAA,CCflC,CDekC,CAAP,CGbpC,KADA,IAAI,EAAM,EACV,CAAO,CAAC,CAAC,CAAD,CFFC,CEEI,KAAA,EAAL,MAAR,CAAA,CACE,CAAA,KAAA,CAAS,CAAA,MAAT,CAEF,EAAA,CAAO,CFRP,CAAA,MAAA,EAD6C,CG7B/C,IAAMC,EAAiB,QAAjBA,EAA6BC,SAAAC,cAAA,CAAuB,KAAvB,CAEbC;QAAA,EAAA,CAACC,CAAD,CAAa,CACjC,IAAMC,EAAMD,CAAAE,aAAA,CAAqB,UAArB,CAAZ,CACMC,EAASH,CAAAE,aAAA,CAAqB,aAArB,CAEfF,EAAAI,gBAAA,CAAwB,UAAxB,CACAJ,EAAAI,gBAAA,CAAwB,aAAxB,CAEIH,EAAAA,CAAJ,EAAaL,CAAb,EAAgCO,CAAhC,GACEH,CAAAC,IADF,CACgBA,CADhB,CAGIE,EAAJ,EAAcP,CAAd,GACEI,CAAAG,OADF,CACmBA,CADnB,CAViC,CAcnC,IAAME,EAAK,IAAIC,oBAAJ,CAAyB,QAAA,CAACC,CAAD,CAAa,CAC/CA,CAAAC,QAAA,CAAgB,QAAA,CAAC,CAAD,CAAgC,CAA7B,IAAAC,EAAF,CAAE,OACjB,IADe,CAAUC,eACzB,CAAoB,CAClB,OAAQD,CAAAE,QAAR,EACA,KAAK,SAAL,CACkB,EAAA,OAAAC,CAAAC,CAAA,CAAIJ,CAAAK,iBAAA,CAAwB,QAAxB,CAAJ,CAAAF,CAAA,CAAuCH,CAAAM,cAAA,CAAqB,KAArB,CAAvC,CAAAH,CAChBJ,QAAA,CAAgBT,CAAhB,CACA,MAEF,MAAK,KAAL,CACEA,CAAA,CAAcU,CAAd,CAPF,CASAJ,CAAAW,UAAA,CAAaP,CAAb,CAVkB,CAD0B,CAAhD,CAD+C,CAAtC,CAeR,CAAEQ,WAAY,kBAAd,CAfQ,CAiBXC;MAAA,GAAA,CAAe,QAAA,EAAM,CACnB,IAAMC,EAAU,EAAA,OAAA,CAAAN,CAAA,CAAIhB,QAAAiB,iBAAA,CAA0B,SAA1B,CAAJ,CAAA,CAAAM,OAAA,CAAiD,QAAA,CAAC,CAAD,CAAoB,CACnF,MAA6B,SAA7B,EADgE,CAAEC,WAC3DV,QAD4E,CAArE,CAGD,GAAA,OAAAW,CAAAT,CAAA,CACVhB,QAAAiB,iBAAA,CAA0B,aAA1B,CADU,CAAAQ,CAAAT,CAAA,CAEVM,CAFU,CAAAG,CAIfd,QAAA,CAAe,QAAA,CAACe,CAAD,CAAS,CACtBA,CAAAnB,gBAAA,CAAoB,IAApB,CACAC,EAAAmB,QAAA,CAAWD,CAAX,CAFsB,CAAxB,CARmB,CAarBL,OAAA,GAAA;",
"sources":[" [synthetic:es6/util/arrayiterator] "," [synthetic:es6/util/arrayfromiterable] "," [synthetic:es6/util/makeiterator] "," [synthetic:es6/util/arrayfromiterator] ","src/js/images.js"],
"sourcesContent":["/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utility method for creating an iterator for Arrays.\n */\n'require base';\n\n/**\n * Returns an internal iterator from the given array.\n * @param {!Array<T>} array\n * @return {function():!IIterableResult<T>}\n * @template T\n */\n$jscomp.arrayIteratorImpl = function(array) {\n  var index = 0;\n  return function() {\n    if (index < array.length) {\n      return {\n        done: false,\n        value: array[index++],\n      };\n    } else {\n      return {done: true};\n    }\n  };\n};\n\n/**\n * Returns an internal iterator from the given array.\n * @param {!Array<T>} array\n * @return {!Iterator<T>}\n * @template T\n */\n$jscomp.arrayIterator = function(array) {\n  return /** @type {!Iterator<T>} */ ({next: $jscomp.arrayIteratorImpl(array)});\n};\n\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for array destructuring.\n */\n'require es6/util/makeiterator';\n'require es6/util/arrayfromiterator';\n\n\n/**\n * Copies the values from an Iterable into an Array.\n * @param {string|!Array<T>|!Iterable<T>|!Arguments<T>} iterable\n * @return {!Array<T>}\n * @template T\n */\n$jscomp.arrayFromIterable = function(iterable) {\n  if (iterable instanceof Array) {\n    return iterable;\n  } else {\n    return $jscomp.arrayFromIterator($jscomp.makeIterator(iterable));\n  }\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for for-of loops.\n */\n'require es6/util/arrayiterator';\n\n/**\n * Creates an iterator for the given iterable.  This iterator should never\n * be exposed to user code.\n *\n * @param {string|!Iterable<T>|!Iterator<T>|!Arguments<T>} iterable\n * @return {!Iterator<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.makeIterator = function(iterable) {\n  // NOTE: Disabling typechecking because [] not allowed on @struct.\n  var iteratorFunction = typeof Symbol != 'undefined' && Symbol.iterator &&\n      (/** @type {?} */ (iterable)[Symbol.iterator]);\n  return iteratorFunction ? iteratorFunction.call(iterable) :\n      $jscomp.arrayIterator(/** @type {!Array} */ (iterable));\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for array destructuring.\n */\n'require base';\n\n\n/**\n * Copies the values from an Iterator into an Array. The important difference\n * between this and $jscomp.arrayFromIterable is that if the iterator's\n * next() method has already been called one or more times, this method returns\n * only the values that haven't been yielded yet.\n * @param {!Iterator<T>} iterator\n * @return {!Array<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.arrayFromIterator = function(iterator) {\n  var i;\n  var arr = [];\n  while (!(i = iterator.next()).done) {\n    arr.push(i.value);\n  }\n  return arr;\n};\n","const supportsSrcSet = 'srcset' in document.createElement('img')\n\nconst handleElement = (element) => {\n  const src = element.getAttribute('data-src')\n  const srcset = element.getAttribute('data-srcset')\n\n  element.removeAttribute('data-src')\n  element.removeAttribute('data-srcset')\n\n  if (src && (!supportsSrcSet || !srcset)) {\n    element.src = src\n  }\n  if (srcset && supportsSrcSet) {\n    element.srcset = srcset\n  }\n}\nconst io = new IntersectionObserver((entries) => {\n  entries.forEach(({ target, isIntersecting }) => {\n    if (isIntersecting) {\n      switch (target.tagName) {\n      case 'PICTURE': {\n        const sources = [...target.querySelectorAll('source'), target.querySelector('img')]\n        sources.forEach(handleElement)\n        break\n      }\n      case 'IMG':\n        handleElement(target)\n      }\n      io.unobserve(target)\n    }\n  })\n}, { rootMargin: '0px 0px 76px 0px' })\n\nwindow['IO'] = () => {\n  const imgTags = [...document.querySelectorAll('img[io]')].filter(({ parentNode }) => {\n    return parentNode.tagName != 'PICTURE'\n  })\n  const images = [\n    ...document.querySelectorAll('picture[io]'),\n    ...imgTags,\n  ]\n  images.forEach((img) => {\n    img.removeAttribute('io')\n    io.observe(img)\n  })\n}\nwindow['IO']()"],
"names":["$jscomp.arrayIteratorImpl","supportsSrcSet","document","createElement","handleElement","element","src","getAttribute","srcset","removeAttribute","io","IntersectionObserver","entries","forEach","target","isIntersecting","tagName","sources","$jscomp.arrayFromIterable","querySelectorAll","querySelector","unobserve","rootMargin","window","imgTags","filter","parentNode","images","img","observe"]
}
